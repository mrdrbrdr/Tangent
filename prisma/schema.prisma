// Contains your Prisma schema and migrations.

// Database configuration
datasource db {
  provider = "sqlite"    // Using SQLite for development
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"    // Generates TypeScript/JavaScript client
}

model User {
  id          Int            @id @default(autoincrement())
  email       String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  conversations Conversation[]
}

model Conversation {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])

  title       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // One conversation can have many nodes
  nodes       Node[]
}

model Node {
  id             Int         @id @default(autoincrement())
  
  // The conversation this node belongs to
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  // If this is a tangent, which node did we fork from?
  parentNodeId   Int?
  parentNode     Node?       @relation("NodeToNode", fields: [parentNodeId], references: [id])
  childNodes     Node[]      @relation("NodeToNode")

  // The user prompt that triggered this node
  userInput      String
  // The AI response to that prompt
  aiResponse     String

  // Summaries for the entire user+AI exchange
  summaryShort   String?
  summaryLong    String?

  // Distinguish main path from tangents
  branchType     BranchType  // e.g., 'MAIN' or 'TANGENT'

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

// This is how we map an enum in Prisma
enum BranchType {
  MAIN
  TANGENT
}